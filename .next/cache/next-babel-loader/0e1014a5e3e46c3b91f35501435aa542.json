{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0410\\u043B\\u0435\\u043A\\u0441\\u0435\\u0439\\\\Desktop\\\\All Work\\\\next-official-guide\\\\pages\\\\_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from 'next/app';\nimport Layout from '../components/Layout';\n\nclass SushiMaster extends App {\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 7\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"appdiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default SushiMaster; // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// static async getInitialProps(appContext) {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }","map":{"version":3,"sources":["C:/Users/Алексей/Desktop/All Work/next-official-guide/pages/_app.js"],"names":["App","Layout","SushiMaster","render","Component","pageProps","props"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AACA,MAAMC,WAAN,SAA0BF,GAA1B,CAA8B;AAC5BG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA2B,KAAKC,KAAtC;AACA,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF;AAOD;;AAV2B;;AAa9B,eAAeH,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import App from 'next/app';\r\nimport Layout from '../components/Layout';\r\nclass SushiMaster extends App {\r\n  render() {\r\n    const { Component, pageProps } = this.props;\r\n    return (\r\n      <Layout>\r\n        <Component {...pageProps}>\r\n          <div className=\"appdiv\"></div>\r\n        </Component>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SushiMaster;\r\n\r\n// Only uncomment this method if you have blocking data requirements for\r\n// every single page in your application. This disables the ability to\r\n// perform automatic static optimization, causing every page in your app to\r\n// be server-side rendered.\r\n//\r\n// static async getInitialProps(appContext) {\r\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n//   const appProps = await App.getInitialProps(appContext);\r\n//\r\n//   return { ...appProps }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}