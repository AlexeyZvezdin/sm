{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u0410\\u043B\\u0435\\u043A\\u0441\\u0435\\u0439\\\\Desktop\\\\All Work\\\\next-official-guide\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch'; // import fetch from 'unfetch';\n\nimport useSWR from 'swr';\nimport { useRouter } from 'next/router';\n\nfunction fetcher(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n\nexport default function Index(_ref) {\n  var data = _ref.data,\n      error = _ref.error;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query; // не попадает в браузер, можно пользоваться\n  // console.log(process.env.BASE_API, ' process.env.BASE_API');\n\n  /**\r\n   *   Когда надо чтобы отрабатывало на фронте юзается useSWR\r\n   *   В данном случае нам это не надо, сео.\r\n   *\r\n   */\n  // The following line has optional chaining, added in Next.js v9.1.5,\n  // is the same as `data && data.author`\n\n\n  var allData = data === null || data === void 0 ? void 0 : data.result;\n  var cityName = allData === null || allData === void 0 ? void 0 : allData.name;\n  var cityId = allData === null || allData === void 0 ? void 0 : allData.id;\n  console.log(cityName, ' CITY');\n  if (cityId == true) isLoading = false;\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Healoo\"), __jsx(React.Fragment, null, cityName ? __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, cityName) : 'Failed to load data, please refresh the page'));\n}\n\nIndex.getInitialProps = function _callee() {\n  var defaultCity, data, cityId, config, allCategories, allCategoriesData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://client-api.sushi-master.ru/api/v1/city/default'));\n\n        case 2:\n          defaultCity = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(defaultCity.json());\n\n        case 5:\n          data = _context.sent;\n          cityId = data.result.cityId;\n          console.log(cityId, ' cityId');\n          config = {\n            params: {\n              cityId: cityId\n            }\n          };\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(fetch(\"https://client-api.sushi-master.ru/api/v1/catalog/categories/all\"));\n\n        case 11:\n          allCategories = _context.sent;\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(allCategories.json());\n\n        case 14:\n          allCategoriesData = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n/**\r\n * TODO: Ниже расположен тестовый код, в будущем удалить\r\n */\n// const PostLink = (props) => (\n//   <li>\n//     <Link href={`/p/[id]}`} as={`/p/${props.id}`}>\n//       <a {...props}>{props.title}</a>\n//     </Link>\n//   </li>\n// );\n// const Index = (props) => {\n//   return (\n//     <Layout>\n//       <h1>My Blog</h1>\n//       <p>Hello Next.js</p>\n//       <ul>\n//         {/* <PostLink title=\"Hello Next.js\" id=\"hello-nextjs\" />\n//         <PostLink title=\"Learn Next.js is awesome\" id=\"learn-nextjs\" />\n//         <PostLink title=\"Deploy apps with Zeit\" id=\"deploy-nextjs\" /> */}\n//         {props.shows.map((show) => (\n//           <li key={show.id}>\n//             <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n//               <a>{show.name}</a>\n//             </Link>\n//           </li>\n//         ))}\n//       </ul>\n//     </Layout>\n//   );\n// };\n// Index.getInitialProps = async function () {\n//   const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n//   const data = await res.json();\n//   console.log(data, `Show data fetched. Count: ${data.length}`);\n//   return {\n//     shows: data.map((entry) => entry.show),\n//   };\n// };\n// const { data, error } = useSWR(\n//   () => `/api/randomQuote${query.author ? '?author=' + query.author : ''}`,\n//   fetcher\n// );\n// const { data, error } = useSWR(\n//   () => 'https://client-api.sushi-master.ru/api/v1/city/default',\n//   fetcher\n// );\n// console.log(data, ' I AM RES ON FRONT');","map":{"version":3,"sources":["C:/Users/Алексей/Desktop/All Work/next-official-guide/pages/index.js"],"names":["Layout","Link","fetch","useSWR","useRouter","fetcher","url","then","r","json","Index","data","error","query","allData","result","cityName","name","cityId","id","console","log","isLoading","getInitialProps","defaultCity","config","params","allCategories","allCategoriesData"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,SAAOJ,KAAK,CAACI,GAAD,CAAL,CAAWC,IAAX,CAAgB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,IAAF,EAAP;AAAA,GAAhB,CAAP;AACD;;AAED,eAAe,SAASC,KAAT,OAAgC;AAAA,MAAfC,IAAe,QAAfA,IAAe;AAAA,MAATC,KAAS,QAATA,KAAS;;AAAA,mBAC3BR,SAAS,EADkB;AAAA,MACrCS,KADqC,cACrCA,KADqC,EAE7C;AACA;;AACA;;;;;AAKA;AACA;;;AACA,MAAMC,OAAO,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEI,MAAtB;AACA,MAAMC,QAAQ,GAAGF,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEG,IAA1B;AACA,MAAMC,MAAM,GAAGJ,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEK,EAAxB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAAsB,OAAtB;AACA,MAAIE,MAAM,IAAI,IAAd,EAAoBI,SAAS,GAAG,KAAZ;AAEpB,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,4BACGN,QAAQ,GACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,QAAJ,CADO,GAGP,8CAJJ,CAFF,CADF;AAYD;;AAEDN,KAAK,CAACa,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEIrB,KAAK,CAC7B,wDAD6B,CAFT;;AAAA;AAEhBsB,UAAAA,WAFgB;AAAA;AAAA,2CAKLA,WAAW,CAACf,IAAZ,EALK;;AAAA;AAKlBE,UAAAA,IALkB;AAMlBO,UAAAA,MANkB,GAMTP,IAAI,CAACI,MAAL,CAAYG,MANH;AAOtBE,UAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAoB,SAApB;AACMO,UAAAA,MARgB,GAQP;AACbC,YAAAA,MAAM,EAAE;AACNR,cAAAA,MAAM,EAAEA;AADF;AADK,WARO;AAAA;AAAA,2CAcMhB,KAAK,oEAdX;;AAAA;AAchByB,UAAAA,aAdgB;AAAA;AAAA,2CAiBQA,aAAa,CAAClB,IAAd,EAjBR;;AAAA;AAiBlBmB,UAAAA,iBAjBkB;AAAA,2CAyBf;AACLjB,YAAAA,IAAI,EAAJA;AADK,WAzBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AA8BA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import Layout from '../components/Layout';\r\nimport Link from 'next/link';\r\nimport fetch from 'isomorphic-unfetch';\r\n// import fetch from 'unfetch';\r\nimport useSWR from 'swr';\r\nimport { useRouter } from 'next/router';\r\n\r\nfunction fetcher(url) {\r\n  return fetch(url).then((r) => r.json());\r\n}\r\n\r\nexport default function Index({ data, error }) {\r\n  const { query } = useRouter();\r\n  // не попадает в браузер, можно пользоваться\r\n  // console.log(process.env.BASE_API, ' process.env.BASE_API');\r\n  /**\r\n   *   Когда надо чтобы отрабатывало на фронте юзается useSWR\r\n   *   В данном случае нам это не надо, сео.\r\n   *\r\n   */\r\n  // The following line has optional chaining, added in Next.js v9.1.5,\r\n  // is the same as `data && data.author`\r\n  const allData = data?.result;\r\n  const cityName = allData?.name;\r\n  const cityId = allData?.id;\r\n  console.log(cityName, ' CITY');\r\n  if (cityId == true) isLoading = false;\r\n\r\n  return (\r\n    <Layout>\r\n      <h1>Healoo</h1>\r\n      <>\r\n        {cityName ? (\r\n          <p>{cityName}</p>\r\n        ) : (\r\n          'Failed to load data, please refresh the page'\r\n        )}\r\n      </>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nIndex.getInitialProps = async function () {\r\n  // const defaultCityRequest = process.env.API + '/api/v1/city/default';\r\n  const defaultCity = await fetch(\r\n    'https://client-api.sushi-master.ru/api/v1/city/default'\r\n  );\r\n  let data = await defaultCity.json();\r\n  let cityId = data.result.cityId;\r\n  console.log(cityId, ' cityId');\r\n  const config = {\r\n    params: {\r\n      cityId: cityId,\r\n    },\r\n  };\r\n\r\n  const allCategories = await fetch(\r\n    `https://client-api.sushi-master.ru/api/v1/catalog/categories/all`\r\n  );\r\n  let allCategoriesData = await allCategories.json();\r\n  // console.log(allCategoriesData.result.items, ' allCategoriesData');\r\n  // const products = await fetch(\r\n  //   `https://client-api.sushi-master.ru/api/v1/catalog/products/`\r\n  // );\r\n\r\n  // let products = await products.json();\r\n  // console.log(products, ' products');\r\n  return {\r\n    data,\r\n  };\r\n};\r\n\r\n/**\r\n * TODO: Ниже расположен тестовый код, в будущем удалить\r\n */\r\n\r\n// const PostLink = (props) => (\r\n//   <li>\r\n//     <Link href={`/p/[id]}`} as={`/p/${props.id}`}>\r\n//       <a {...props}>{props.title}</a>\r\n//     </Link>\r\n//   </li>\r\n// );\r\n\r\n// const Index = (props) => {\r\n//   return (\r\n//     <Layout>\r\n//       <h1>My Blog</h1>\r\n//       <p>Hello Next.js</p>\r\n//       <ul>\r\n//         {/* <PostLink title=\"Hello Next.js\" id=\"hello-nextjs\" />\r\n//         <PostLink title=\"Learn Next.js is awesome\" id=\"learn-nextjs\" />\r\n//         <PostLink title=\"Deploy apps with Zeit\" id=\"deploy-nextjs\" /> */}\r\n//         {props.shows.map((show) => (\r\n//           <li key={show.id}>\r\n//             <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\r\n//               <a>{show.name}</a>\r\n//             </Link>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </Layout>\r\n//   );\r\n// };\r\n\r\n// Index.getInitialProps = async function () {\r\n//   const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\r\n//   const data = await res.json();\r\n//   console.log(data, `Show data fetched. Count: ${data.length}`);\r\n\r\n//   return {\r\n//     shows: data.map((entry) => entry.show),\r\n//   };\r\n// };\r\n\r\n// const { data, error } = useSWR(\r\n//   () => `/api/randomQuote${query.author ? '?author=' + query.author : ''}`,\r\n//   fetcher\r\n// );\r\n\r\n// const { data, error } = useSWR(\r\n//   () => 'https://client-api.sushi-master.ru/api/v1/city/default',\r\n//   fetcher\r\n// );\r\n// console.log(data, ' I AM RES ON FRONT');\r\n"]},"metadata":{},"sourceType":"module"}