{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _readOnlyError from \"@babel/runtime/helpers/esm/readOnlyError\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch'; // import fetch from 'unfetch';\n\nimport useSWR from 'swr';\nimport { useRouter } from 'next/router';\nimport Cookies from 'js-cookie';\n\nfunction fetcher(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n\nexport default function Index(_ref) {\n  var data = _ref.data,\n      error = _ref.error;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query; // не попадает в браузер, можно пользоваться\n  // console.log(process.env.BASE_API, ' process.env.BASE_API');\n\n  /**\r\n   *   Когда надо чтобы отрабатывало на фронте юзается useSWR\r\n   *   В данном случае нам это не надо, сео.\r\n   *\r\n   */\n  // The following line has optional chaining, added in Next.js v9.1.5,\n  // is the same as `data && data.author`\n\n\n  var allData = data === null || data === void 0 ? void 0 : data.result;\n  var cityName = allData === null || allData === void 0 ? void 0 : allData.name;\n  var cityId = allData === null || allData === void 0 ? void 0 : allData.id;\n  var supportPhone = allData === null || allData === void 0 ? void 0 : allData.supportPhone;\n  supportPhone ? Cookies.set('supportPhone', supportPhone, {\n    expires: 3\n  }) : supportPhone = (_readOnlyError(\"supportPhone\"), false);\n  if (cityId == true) isLoading = false; // подрубить редакс чтобы туда отсюда вкидывать дату, или в куки\n\n  return __jsx(React.Fragment, null, __jsx(\"h1\", null, \"Healoo \", supportPhone), __jsx(React.Fragment, null, JSON.stringify(allData), cityName ? __jsx(\"p\", null, cityName) : 'Failed to load data, please refresh the page'));\n}\n\nIndex.getInitialProps = function _callee() {\n  var defaultCity, data, cityId, config, allCategories, allCategoriesData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://client-api.sushi-master.ru/api/v1/city/default'));\n\n        case 2:\n          defaultCity = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(defaultCity.json());\n\n        case 5:\n          data = _context.sent;\n          cityId = data.result.cityId;\n          console.log(cityId, ' cityId');\n          config = {\n            params: {\n              cityId: cityId\n            }\n          };\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(fetch(\"https://client-api.sushi-master.ru/api/v1/catalog/categories/all\"));\n\n        case 11:\n          allCategories = _context.sent;\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(allCategories.json());\n\n        case 14:\n          allCategoriesData = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n/**\r\n * TODO: Ниже расположен тестовый код, в будущем удалить\r\n */\n// const PostLink = (props) => (\n//   <li>\n//     <Link href={`/p/[id]}`} as={`/p/${props.id}`}>\n//       <a {...props}>{props.title}</a>\n//     </Link>\n//   </li>\n// );\n// const Index = (props) => {\n//   return (\n//     <Layout>\n//       <h1>My Blog</h1>\n//       <p>Hello Next.js</p>\n//       <ul>\n//         {/* <PostLink title=\"Hello Next.js\" id=\"hello-nextjs\" />\n//         <PostLink title=\"Learn Next.js is awesome\" id=\"learn-nextjs\" />\n//         <PostLink title=\"Deploy apps with Zeit\" id=\"deploy-nextjs\" /> */}\n//         {props.shows.map((show) => (\n//           <li key={show.id}>\n//             <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n//               <a>{show.name}</a>\n//             </Link>\n//           </li>\n//         ))}\n//       </ul>\n//     </Layout>\n//   );\n// };\n// Index.getInitialProps = async function () {\n//   const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n//   const data = await res.json();\n//   console.log(data, `Show data fetched. Count: ${data.length}`);\n//   return {\n//     shows: data.map((entry) => entry.show),\n//   };\n// };\n// const { data, error } = useSWR(\n//   () => `/api/randomQuote${query.author ? '?author=' + query.author : ''}`,\n//   fetcher\n// );\n// const { data, error } = useSWR(\n//   () => 'https://client-api.sushi-master.ru/api/v1/city/default',\n//   fetcher\n// );\n// console.log(data, ' I AM RES ON FRONT');","map":null,"metadata":{},"sourceType":"module"}